buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
	}

	repositories {
        jcenter()
    }
    
    dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

wrapper.gradleVersion = '3.5'

def vJavaLang = '1.8'
def javaProject = [project('common'), project('domain'), project(':api'), project(':admin')]
def webProject = [project(':api'), project(':admin')]

println GradleVersion.current()
println "System JVM Location = " + System.getProperty("java.home")
println "Project JVM Version = ${vJavaLang}"

configure(allprojects) {
    apply plugin: 'eclipse'

	repositories {
		jcenter()
	}

    eclipse {  	
		project.natures "org.springsource.ide.eclipse.gradle.core.nature"
	    classpath {
	         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
	         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	    }
	}	
}

configure(javaProject) {
	apply plugin: 'java'
	apply plugin: 'jacoco'
	apply plugin: 'org.springframework.boot'
    
    sourceCompatibility = vJavaLang
	targetCompatibility = vJavaLang	
	
	ext.jacocoVersion = '0.7.6.201602180812'

    dependencies {
        runtime ("org.jacoco:org.jacoco.agent:${jacocoVersion}")
    }

    test {    	
		println "[TEST] I'm ${project.name}"
	    jacoco {
	        append = false
	        destinationFile = file("${buildDir.name}/jacoco/test.exec")
	    }
	}
	    
	jacocoTestReport {	
	    group = "Project Test Reports"
	 	description = "Generate Jacoco coverage reports after running tests."
	 	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
	    reports {
	        xml.enabled false
	        csv.enabled false
	        html.destination "${buildDir}/reports/jacocoHtml"
	  		sourceSets sourceSets.main
	    }
	}	
}

configure(webProject) {
	apply plugin: 'war'

	configurations {
		crosstest
		testCompile.extendsFrom crosstest
	}
	
	dependencies {
		testCompile ('org.springframework.boot:spring-boot-starter-test')
   	    crosstest project(':domain').sourceSets.test.output
	}
	
	eclipse {
		classpath {
        	minusConfigurations += [ configurations.crosstest ]
        }	
	}	
}