def vJavaLang = '1.8'
def javaProjects = [ project(':common'), project(':api') ]
def bootProjects = javaProjects - project(':common')

wrapper.gradleVersion = '3.5'

buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
	}

	repositories {
        jcenter()
    }
    
    dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

configure(allprojects) {
    apply plugin: 'eclipse'
    
    eclipse {  	
		project.natures "org.springsource.ide.eclipse.gradle.core.nature"
	    classpath {
	         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
	         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	    }
	    println GradleVersion.current()
	    println "System JVM Location = " + System.getProperty("java.home")
	    println "Project JVM Version = $vJavaLang"
	}	
}
	
configure(javaProjects) {
	apply plugin: 'java'
	apply plugin: 'jacoco'
    
    sourceCompatibility = vJavaLang
	targetCompatibility = vJavaLang	
	
	ext.jacocoVersion = '0.7.1.201405082137'
	
	repositories {
        maven { url springRepo }
    }
    
    dependencies {
        compile 'org.slf4j:slf4j-api'
        compile 'org.projectlombok:lombok'
        
        runtime "org.jacoco:org.jacoco.agent:$jacocoVersion"
        
        testCompile 'junit:junit'
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.mockito:mockito-core'
        testCompile 'org.objenesis:objenesis'
    }

    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
    }
    
    test {    	
		println "[test] I'm $project.name"
	    jacoco {
	        append = false
	        destinationFile = file("${buildDir.name}/jacoco/test.exec")
	    }
	}
	    
	jacocoTestReport {	
	    group = "Project Test Reports"
	 	description = "Generate Jacoco coverage reports after running tests."
	 	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
	    reports {
	        xml.enabled false
	        csv.enabled false
	        html.destination "$buildDir/reports/jacocoHtml"
	  		sourceSets sourceSets.main
	    }
	}	
}

println GradleVersion.current()
println "System JVM Location = " + System.getProperty("java.home")
println "Project JVM Version = $vJavaLang"

configure(bootProjects) {
	apply plugin: "io.spring.dependency-management"
    apply plugin: 'spring-boot'
	
	springBoot.backupSource = false
	
	dependencyManagement {
        imports {
            mavenBom 'io.spring.platform:platform-bom:2.0.0.RELEASE'
        }
    }
    
	configurations {
		crosstest
		testCompile.extendsFrom crosstest
	}
	
	dependencies {
		testCompile "org.springframework.boot:spring-boot-starter-test"		
   	    crosstest project(':common').sourceSets.test.output
	}
	
	eclipse {
		classpath {
        	minusConfigurations += [ configurations.crosstest ]
        }	
	}	
}